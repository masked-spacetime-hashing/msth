from MSTH.configs.method_import import *
from copy import deepcopy

method_configs: Dict[str, Union[TrainerConfig, VideoTrainerConfig]] = {}

method_configs["imm-1"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=2000000000000,
    max_num_iterations=30000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/11_Alexa_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            dataset_mask_precomputed_path=Path("/data/machine/data/immersive/11_Alexa_2/masks.pt"),
            train_num_rays_per_batch=16384,
            eval_num_rays_per_batch=16384,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            use_stratified_pixel_sampler=True,
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=10000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            num_proposal_samples_per_ray=(256, 96),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            # far_plane=500,
            # proposal_initial_sampler="uniform",
            # sparse_loss_mult_h=0.01,
            # sparse_loss_mult_f=0.01,
            mask_loss_mult=0.01,
            mst_mode="mt",
            mask_reso=(256, 256, 256),
            mask_log2_hash_size=24,
            mask_type="hierarchical",
            use_loss_static=True,
            render_static=True,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 17,
                    "log2_hashmap_size_temporal": 17,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (256, 256, 256),
                    "mask_log2_hash_size": 24,
                    "mask_type": "hierarchical",
                },
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 17,
                    "log2_hashmap_size_temporal": 17,
                    "num_levels": 5,
                    "max_res": (256, 256, 256, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (256, 256, 256),
                    "mask_log2_hash_size": 24,
                    "mask_type": "hierarchical",
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-4, max_steps=15000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-4, max_steps=15000),
        },
    },
)

method_configs["imm-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=20000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/11_Alexa_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            dataset_mask_precomputed_path=Path("/data/machine/data/immersive/11_Alexa_2/masks.pt"),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            use_stratified_pixel_sampler=True,
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=10000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            # far_plane=500,
            # proposal_initial_sampler="uniform",
            # sparse_loss_mult_h=0.01,
            # sparse_loss_mult_f=0.01,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.0,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="hierarchical",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 17,
                    "log2_hashmap_size_temporal": 17,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "hierarchical",
                },
                # {
                #     "hidden_dim": 16,
                #     "log2_hashmap_size_spatial": 17,
                #     "log2_hashmap_size_temporal": 17,
                #     "num_levels": 5,
                #     "max_res": (256, 256, 256, 150),
                #     "base_res": (16, 16, 16, 15),
                #     "use_linear": False,
                #     "mode": "mt",
                #     "mask_reso": (64, 64, 64),
                #     "mask_log2_hash_size": 18,
                #     "mask_type": "hierarchical",
                # },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-4, max_steps=15000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-4, max_steps=15000),
        },
    },
)

method_configs["imm-3"] = deepcopy(method_configs["imm-1"])
method_configs["imm-3"].pipeline.datamanager.dataparser.scale_factor = 1 / 4.0

method_configs["imm-4"] = deepcopy(method_configs["imm-1"])
method_configs["imm-4"].pipeline.datamanager.dataparser.scale_factor = 1 / 1.0

method_configs["imm-4-stable"] = deepcopy(method_configs["imm-2"])
method_configs["imm-4-stable"].pipeline.datamanager.dataparser.scale_factor = 1 / 1.0

method_configs["imm-5-more-samples"] = deepcopy(method_configs["imm-2"])
method_configs["imm-5-more-samples"].pipeline.model.num_nerf_samples_per_ray = 96
method_configs["imm-5-more-samples"].pipeline.model.num_proposal_samples_per_ray = (256, 128)

method_configs["imm1-smaller-lr"] = deepcopy(method_configs["imm-1"])
method_configs["imm1-smaller-lr"].max_num_iterations = 20000
method_configs["imm1-smaller-lr"].optimizers = {
    "proposal_networks": {
        "optimizer": AdamOptimizerConfig(lr=1e-3, eps=1e-15),
        "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-4, max_steps=15000),
    },
    "fields": {
        "optimizer": AdamOptimizerConfig(lr=1e-3, eps=1e-15),
        "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-4, max_steps=15000),
    },
}

method_configs["imm1-larger-lr"] = deepcopy(method_configs["imm-1"])
method_configs["imm1-larger-lr"].max_num_iterations = 20000
method_configs["imm1-larger-lr"].optimizers = {
    "proposal_networks": {
        "optimizer": AdamOptimizerConfig(lr=5e-2, eps=1e-15),
        "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-3, max_steps=15000),
    },
    "fields": {
        "optimizer": AdamOptimizerConfig(lr=5e-1, eps=1e-15),
        "scheduler": ExponentialDecaySchedulerConfig(lr_final=5e-3, max_steps=15000),
    },
}

method_configs["02-flame-base"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/02_Flames_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 2 * np.sin((x - 1000) * np.pi / (2 * (40000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=500000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=1.0,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["03-dog-base"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/03_Dog_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 2 * np.sin((x - 1000) * np.pi / (2 * (40000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=500000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=1.0,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["04-truck-base"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/04_Truck_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 2 * np.sin((x - 1000) * np.pi / (2 * (40000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=500000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=1.0,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-base"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 2 * np.sin((x - 1000) * np.pi / (2 * (40000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=500000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=1.0,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-base-no-prop-mask"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 2 * np.sin((x - 1000) * np.pi / (2 * (40000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=500000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=1.0,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            mask_loss_for_proposal=False,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-10-2-hidden-dim-128"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            hidden_dim=128,
            hidden_dim_color=128,
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-5-1"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=5,
            static_dynamic_sampling_ratio_end=1,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["02-flames-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/02_Flames_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["03-dog-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/03_Dog_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["01-welder-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/01_Welder_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["09-exhibit-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/09_Alexa_Meade_Exhibit_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-error-map"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            # spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["error-map-test"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/flame_salmon_videos_test"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            # spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["11-alexa-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/11_Alexa_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["12-cave-10-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/12_Cave_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["12-cave-10-2-set-plane"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/12_Cave_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
                set_camera_plane=True,
                look_along_positive=True,
                look_axis=1,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-50-10"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)


method_configs["09-exhibit-10-2-ss-4"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/09_Alexa_Meade_Exhibit_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.25,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["09-exhibit-10-2-ss-4-lr-1e-3"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/09_Alexa_Meade_Exhibit_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.25,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-3, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-3, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["09-exhibit-10-2-ss-8"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/09_Alexa_Meade_Exhibit_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.125,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-Horse-10-2-ss-4-it-8e4"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=80000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/09_Alexa_Meade_Exhibit_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.125,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-app-zero-eval"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 90),
            use_appearance_embedding=True,
            use_average_appearance_embedding=False,
            base_res=(16, 16, 16, 30),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 90),
                    "base_res": (16, 16, 16, 30),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": None,
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": None,
        },
    },
)

method_configs["12-cave-app"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/12_Cave_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
                # set_camera_plane=True,
                # look_along_positive=True,
                # look_axis=1,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=2,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            use_appearance_embedding=True,
            use_average_appearance_embedding=True,
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["mask_val_test"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_eval_image=2000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            disable_mask_loss_for_dynamic_rays=True,
            get_mask_val=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-10-2-no-dynamic-mask-loss"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            disable_mask_loss_for_dynamic_rays=True,
            get_mask_val=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-10"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-10"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=10,
            static_dynamic_sampling_ratio_end=10,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-heir"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2/"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 30),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="hierarchical",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 17,
                    "log2_hashmap_size_temporal": 17,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=75000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=75000),
        },
    },
)

method_configs["10-face-treso-2048-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 2048),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-treso-300-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)


method_configs["10-face-heir-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2/"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 30),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="hierarchical",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 17,
                    "log2_hashmap_size_temporal": 17,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=75000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=75000),
        },
    },
)


def log_reso(b, m, n_lvls):
    a = (n_lvls - 1) / (np.exp2(m / b) - 2)

    def reso(x):
        return b * np.log2(2 + x / a)

    return reso


def log_reso_offset_8(b, m, n_lvls):
    a = (n_lvls - 1) / (8 ** (m / b) - 8)

    def reso(x):
        return b * np.log2(8 + x / a) / 3.0

    return reso


def all_max(b, m, n_lvls):
    def reso(x):
        return m

    return reso


method_configs["10-face-log-treso-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=log_reso(15, 300, 16),
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-log-treso-50-30"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=log_reso(15, 300, 16),
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-log-8-treso-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=log_reso_offset_8(15, 300, 16),
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-log-treso-max-45-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=log_reso(15, 45, 16),
            max_res=(2048, 2048, 2048, 150),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["cook-spinach-log-treso-max-150-50-30"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/cook_spinach/videos_2/"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=log_reso(15, 150, 16),
            max_res=(2048, 2048, 2048, 150),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["cook-spinach-log-treso-50-30"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/cook_spinach/videos_2/"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=log_reso(15, 300, 16),
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-50-mst"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mst",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-treso-all-max-45"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            customized_t_reso=all_max(15, 45, 16),
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-80-60"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_2"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=80,
            static_dynamic_sampling_ratio_end=60,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-filtered-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_filtered"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=80,
            static_dynamic_sampling_ratio_end=60,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-face-filtered-50"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/10_Face_filtered"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=50,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["10-horse-filtered-30"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_filtered"),
                # data=Path("/data/machine/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
        ),
        model=DSpaceTimeHashingModelConfig(
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["flame-salmon-error-map"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/flame_salmon_videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            # spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-error-map"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["flame-salmon-error-map-treso-1"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/flame_salmon_videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            # spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
            train_sampler_args={"treso": 1},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-error-map-filtered"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    render_camera_offset=[0, 0.1, 0],
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_filtered"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-error-map-sreso-64-treso-64"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    # render_camera_offset=[]
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/immersive/05_Horse_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-error-map"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
        ),
        model=DSpaceTimeHashingModelConfig(
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["flame-salmon-ndc"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/flame_salmon_videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["flame-salmon-ndc-sf-3"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/flame_salmon_videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0 / 3.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc-40000"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc-sf-3"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0 / 3.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc-sf-2"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0 / 2.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc-ss-6"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                auto_scale_poses=False,
                scene_scale=6.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc-ss-2x"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=2.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            # use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

# oc = original configuration = torch-ngp processed poses
method_configs["coffee-martini-oc"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=3.0,
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1.5"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=1.5,
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1.5-3-3"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.5, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1-3-3-hidden-128-layer-7"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10001,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.0, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            num_layers_color=7,
            hidden_dim=128,
            hidden_dim_color=128,
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1-3-3-hidden-128-layer-7-cos"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10001,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.0, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            num_layers_color=7,
            hidden_dim=128,
            hidden_dim_color=128,
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": CosineDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": CosineDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs[
    "coffee-martini-oc-ss-1-3-3-hidden-128-layer-7-cos-error-map-field-lr-1e-3"
] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10001,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.0, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            # spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            num_layers_color=3,
            num_layers=4,
            hidden_dim=128,
            hidden_dim_color=128,
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": CosineDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-3, eps=1e-15),
            "scheduler": CosineDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1.5-3-3-mst"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.5, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mst",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1.5-3-3-mst-40000"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=40000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.5, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.1,
            mask_loss_for_proposal=False,
            mst_mode="mst",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1.5-3-3-mst-mask-loss-0.01"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.5, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mst",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-ndc-sf-6"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0 / 6.0,
                auto_scale_poses=False,
                scene_scale=3.0,
                center_poses=False,
                orientation_method="none",
                use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=30,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            # use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-oc-ss-1.5-3-3-layer-4-3"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.5, 3.0, 3.0],
                # use_llff_poses=True,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            # spatial_temporal_sampler="st",
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            num_layers_color=3,
            num_layers=4,
            use_ndc=True,
            use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["coffee-martini-trf-poses"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=10000,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        # use_error_map_sampler=True,
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/data/machine/data/coffee_martini/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=1.0,
                scene_scale=[1.5, 3.0, 3.0],
                use_llff_poses=True,
                auto_scale_poses=False,
                orientation_method="up",
                convert_pose=False,
                center_poses=False,
                ndc_near=1.0,
            ),
            train_num_rays_per_batch=16384,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            spatial_temporal_sampler="st",
            # train_sampler_type="error_map",
            train_sampler_args={},
        ),
        model=DSpaceTimeHashingModelConfig(
            use_ndc=True,
            # use_error_map_sampler=True,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=19,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)

method_configs["05-horse-original-4_25_29"] = SpaceTimeHashingTrainerConfig(
    method_name="Spatial_Time_Hashing_With_Base",
    steps_per_eval_batch=1000,
    steps_per_save=50000,
    max_num_iterations=20001,
    mixed_precision=True,
    log_gradients=True,
    pipeline=SpaceTimePipelineConfig(
        datamanager=SpaceTimeDataManagerConfig(
            dataparser=VideoDataParserConfig(
                data=Path("/opt/czl/nerf/data/immersive/05_Horse_2"),
                # data=Path("/opt/czl/nerf/data/fit/videos_2"),
                downscale_factor=2,
                # scale_factor=1.0 / 2.0,
                scale_factor=0.5,
            ),
            train_num_rays_per_batch=16384,
            # eval_num_rays_per_batch=32768,
            camera_optimizer=CameraOptimizerConfig(mode="off"),
            use_uint8=True,
            # use_stratified_pixel_sampler=True,
            spatial_temporal_sampler="st",
            # n_time_for_dynamic=3,
            n_time_for_dynamic=lambda x: 1 if x < 1000 else 1 + 5 * np.sin((x - 1000) * np.pi / (2 * (20000 - 1000))),
            static_dynamic_sampling_ratio=50,
            static_dynamic_sampling_ratio_end=30,
            static_ratio_decay_total_steps=20000,
            # mask_mode="std",
        ),
        model=DSpaceTimeHashingModelConfig(
            num_layers=4,
            hidden_dim=128,
            hidden_dim_color=128,
            # distortion_loss_mult=0.0,
            max_res=(2048, 2048, 2048, 300),
            base_res=(16, 16, 16, 15),
            # num_proposal_samples_per_ray=(256, 96),
            num_proposal_samples_per_ray=(128,),
            num_nerf_samples_per_ray=48,
            proposal_weights_anneal_max_num_iters=5000,
            # proposal_weights_anneal_slope = 10.0,
            log2_hashmap_size_spatial=19,
            log2_hashmap_size_temporal=21,
            eval_num_rays_per_chunk=32768,
            mask_loss_mult=0.01,
            mask_loss_for_proposal=False,
            mst_mode="mt",
            mask_reso=(128, 128, 128),
            mask_log2_hash_size=21,
            mask_type="global",
            st_mlp_mode="shared",
            num_proposal_iterations=1,
            use_loss_static=False,
            render_static=False,
            interp="linear",
            mask_init_mean=-1,
            proposal_net_args_list=[
                {
                    "hidden_dim": 16,
                    "log2_hashmap_size_spatial": 18,
                    "log2_hashmap_size_temporal": 18,
                    "num_levels": 5,
                    "max_res": (128, 128, 128, 150),
                    "base_res": (16, 16, 16, 15),
                    "use_linear": False,
                    "mode": "mt",
                    "mask_reso": (64, 64, 64),
                    "mask_log2_hash_size": 18,
                    "mask_type": "global",
                    "st_mlp_mode": "shared",
                    "interp": "linear",
                    "mask_init_mean": -1,
                },
            ],
        ),
    ),
    optimizers={
        "proposal_networks": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
        "fields": {
            "optimizer": AdamOptimizerConfig(lr=1e-2, eps=1e-15),
            "scheduler": ExponentialDecaySchedulerConfig(lr_final=2e-4, max_steps=35000),
        },
    },
)